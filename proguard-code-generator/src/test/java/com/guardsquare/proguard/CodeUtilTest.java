/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.guardsquare.proguard;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CodeUtilTest {
    @Test
    public void testHelloWorld() {
        String proguardIns = CodeUtil.getProGuardInstructions("System.out.println(\"Hello World\");");

        assertEquals("CompactCodeAttributeComposer composer = new CompactCodeAttributeComposer(targetClass);\n" +
                "composer\n" +
                "\t.getstatic(\"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n" +
                "\t.ldc(\"Hello World\")\n" +
                "\t.invokevirtual(\"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\")\n" +
                "\t._return()\n", proguardIns);
    }


    @Test
    public void testBranch() {
        String proguardIns = CodeUtil.getProGuardInstructions(
                "int x = Integer.valueOf(25); if (x > 2) System.out.println(\"Hello World\"); else System.out.println(\"Goodbye World\");");

        System.out.println(proguardIns);

        assertEquals("CompactCodeAttributeComposer composer = new CompactCodeAttributeComposer(targetClass);\n" +
                "Label label0 = composer.createLabel();\n" +
                "Label label1 = composer.createLabel();\n" +
                "composer\n" +
                "\t.bipush(25)\n" +
                "\t.invokestatic(\"java/lang/Integer\", \"valueOf\", \"(I)Ljava/lang/Integer;\")\n" +
                "\t.invokevirtual(\"java/lang/Integer\", \"intValue\", \"()I\")\n" +
                "\t.istore_1()\n" +
                "\t.iload_1()\n" +
                "\t.iconst_2()\n" +
                "\t.if_icmple(label0)\n" +
                "\t.getstatic(\"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n" +
                "\t.ldc(\"Hello World\")\n" +
                "\t.invokevirtual(\"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\")\n" +
                "\t._goto(label1)\n" +
                "\t.label(label0)\n" +
                "\t.getstatic(\"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\")\n" +
                "\t.ldc(\"Goodbye World\")\n" +
                "\t.invokevirtual(\"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\")\n" +
                "\t.label(label1)\n" +
                "\t._return()\n", proguardIns);
    }


    @Test
    public void testIntStore() {
        String proguardIns = CodeUtil.getProGuardInstructions(
                "int a = 1; int b = 64; int c = 10000000; boolean d = true; int e = -1;");

        System.out.println(proguardIns);

        assertEquals("CompactCodeAttributeComposer composer = new CompactCodeAttributeComposer(targetClass);\n" +
                "composer\n" +
                "\t.iconst_1()\n" +
                "\t.istore_1()\n" +
                "\t.bipush(64)\n" +
                "\t.istore_2()\n" +
                "\t.ldc(10000000)\n" +
                "\t.istore_3()\n" +
                "\t.iconst_1()\n" +
                "\t.istore(4)\n" +
                "\t.iconst_m1()\n" +
                "\t.istore(5)\n" +
                "\t._return()\n", proguardIns);
    }


    @Test
    public void testString() {
        String proguardIns = CodeUtil.getProGuardInstructions(
                "String s = \"Hello\";");

        System.out.println(proguardIns);

        assertEquals("CompactCodeAttributeComposer composer = new CompactCodeAttributeComposer(targetClass);\n" +
                "composer\n" +
                "\t.ldc(\"Hello\")\n" +
                "\t.astore_1()\n" +
                "\t._return()\n", proguardIns);
    }


    @Test
    public void test() {
        String proguardIns = CodeUtil.getProGuardInstructions(
                "int x = java.lang.Integer.MAX_VALUE; for (int i = 0; i < x; i++) {" +
                        "    if (i > 5) System.out.println(\"Hello \" + (x % 2));" +
                        "    else System.out.println(\"Bye \" + (i / 2));" +
                        "}");

        System.out.println(proguardIns);

        assertEquals("CompactCodeAttributeComposer composer = new CompactCodeAttributeComposer(targetClass);\n" +
                "composer\n" +
                "\t.ldc(\"Hello\")\n" +
                "\t.astore_1()\n" +
                "\t._return()\n", proguardIns);
    }
}
